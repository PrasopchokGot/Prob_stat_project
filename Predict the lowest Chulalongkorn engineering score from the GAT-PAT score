{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1TGGWHNEtBoANbqXQgEOKXIA3D2nZ36p2","timestamp":1667581048927},{"file_id":"1fCWa3cgFFwwvsqF99dRXfHBUkiMfoIWC","timestamp":1636038545620}],"collapsed_sections":["afGDsK8UYPdL"]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"h3SbSmwEgq88"},"source":["# Predict the lowest Chulalongkorn engineering score from the GAT-PAT score"]},{"cell_type":"markdown","source":["จัดทำโดยนักศึกษาชั้นปีที่ 2 คณะวิศวกรรมศาสตร์ สาขาวิศวกรรมไฟฟ้า จุฬาลงกรณ์มหาวิทยาลัย\n","\n","1. เขมกร เชื้อลี 6330041121\n","2. พรพิพัฒน์ พงษ์ศิริ 6330342021\n","3. ประสพโชค รอดศิริ 6330304221\n","\n","และเป็นส่วนหนึ่งของรายวิชา 2102203 Probability and Statistics for Electrical Engineers"],"metadata":{"id":"44ePMZImEE3n"}},{"cell_type":"markdown","source":["### จุดประสงค์\n","ทำนายคะแนนต่ำสุดที่ใช้ในการสอบเข้าคณะวิศวกรรมศาสตร์จุฬาลงกรณ์มหาวิทยาลัยจากข้อมูล\n","จำนวนคนตามช่วงคะแนนของ PAT3, PAT1 และ GAT เพื่อช่วยในการตัดสินใจในการเลือกอันดับ Admission ของนักเรียนมัธยมศึกษาปีที่ 6 ในปีถัดๆ ไป"],"metadata":{"id":"FanLmmuxFblx"}},{"cell_type":"markdown","metadata":{"id":"G-QElynJi3Yq"},"source":["### ไฟล์ข้อมูล Excel\n","Download file data [data](https://chula-my.sharepoint.com/:x:/g/personal/6330304221_student_chula_ac_th/EfOMgD2iwcREnL2m2pho7tsBItMQ-YXBXNfJPUsZOQyvfg?e=8weD6p) save as (.xlsx) file. upload file to the folder in left hand side before running this code.\n","\n","gat, pat1, and pat3 sheet are the raw data GAT, PAT1, and PAT3 respectative from mytcas\n","\n","gat1_new and pat1_new are the data that weight by the number of student that test PAT3\n","\n","ie. $gat_{new} = gat*\\frac{\\#\\text{student test PAT3}}{\\#\\text{student test GAT3}}$"]},{"cell_type":"markdown","metadata":{"id":"wO7oXU2er8he"},"source":["## จัดการข้อมูล\n","\n","\n","*   แบ่งข้อมูลเป็นรายวิชาที่ใช้ในการคิดคะแนนสอบเข้าวิศวกรรมศาสตร์จุฬา \n","    *   Pat1, Pat3 และ Gat\n","*   โดยเป็นข้อมูล score distribution ตั้งแต่ปี 2556 - 2565 โดยแบ่งเป็นข้อมูลจำนวนคน ในช่วงคะแนนละ 30 คะแนน ตั้งแต่ 0 - 300 คะแนน"]},{"cell_type":"code","metadata":{"id":"cgtaUuLQjEU2"},"source":["import numpy as np\n","import pandas as pd\n","import scipy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O1YGJM6d2-Ts"},"source":["path =  '/content/vidva_weight.xlsx'\n","df = pd.read_excel(path) \n","\n","gat = pd.read_excel(path, sheet_name='gat').set_index('year')\n","pat1 = pd.read_excel(path, sheet_name='pat1').set_index('year')\n","gat_weight = pd.read_excel(path, sheet_name='gat_weight').set_index('year')\n","pat1_weight = pd.read_excel(path, sheet_name='pat1_weight').set_index('year')\n","pat3 = pd.read_excel(path, sheet_name='pat3').set_index('year')\n","chula_df = pd.read_excel(path, sheet_name='entrance_data').set_index('year')"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pat3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"HKJSuZJxSa_X","executionInfo":{"status":"ok","timestamp":1673345755510,"user_tz":-420,"elapsed":16,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"fd2ecbd5-22de-410a-8745-e0697ee26c77"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      0-30  30-60  60-90  90-120  120-150  150-180  180-210  210-240  240-270  \\\n","year                                                                            \n","65      45   5764  10567    2931     1057      588      281       74        5   \n","64      53   4795  12634    6060     2196     1145      698      338      140   \n","63      22   3084  14273    9341     3381     1567      880      475      114   \n","62      63   5796  15610    7708     2754     1270      730      429      129   \n","61      82   7119  16272    7348     2944     1649      979      582      320   \n","60      28   4806  22046   15502     4665     1858      932      563      199   \n","59     169  14904  28379    9171     2816     1340      683      330       82   \n","58      57   7943  21900   11124     4429     2079     1193      686      330   \n","57      34   3226  13685   11207     3976     1803      808      415      135   \n","56     169  10829  21101    9958     4463     2305     1337      767      298   \n","\n","      270-300  \n","year           \n","65          0  \n","64         15  \n","63         10  \n","62          4  \n","61         52  \n","60         24  \n","59          5  \n","58         35  \n","57         13  \n","56          8  "],"text/html":["\n","  <div id=\"df-8c2163fa-c7b8-47af-8770-d07e07d79a33\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0-30</th>\n","      <th>30-60</th>\n","      <th>60-90</th>\n","      <th>90-120</th>\n","      <th>120-150</th>\n","      <th>150-180</th>\n","      <th>180-210</th>\n","      <th>210-240</th>\n","      <th>240-270</th>\n","      <th>270-300</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>65</th>\n","      <td>45</td>\n","      <td>5764</td>\n","      <td>10567</td>\n","      <td>2931</td>\n","      <td>1057</td>\n","      <td>588</td>\n","      <td>281</td>\n","      <td>74</td>\n","      <td>5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>53</td>\n","      <td>4795</td>\n","      <td>12634</td>\n","      <td>6060</td>\n","      <td>2196</td>\n","      <td>1145</td>\n","      <td>698</td>\n","      <td>338</td>\n","      <td>140</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>22</td>\n","      <td>3084</td>\n","      <td>14273</td>\n","      <td>9341</td>\n","      <td>3381</td>\n","      <td>1567</td>\n","      <td>880</td>\n","      <td>475</td>\n","      <td>114</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>63</td>\n","      <td>5796</td>\n","      <td>15610</td>\n","      <td>7708</td>\n","      <td>2754</td>\n","      <td>1270</td>\n","      <td>730</td>\n","      <td>429</td>\n","      <td>129</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>82</td>\n","      <td>7119</td>\n","      <td>16272</td>\n","      <td>7348</td>\n","      <td>2944</td>\n","      <td>1649</td>\n","      <td>979</td>\n","      <td>582</td>\n","      <td>320</td>\n","      <td>52</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>28</td>\n","      <td>4806</td>\n","      <td>22046</td>\n","      <td>15502</td>\n","      <td>4665</td>\n","      <td>1858</td>\n","      <td>932</td>\n","      <td>563</td>\n","      <td>199</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>169</td>\n","      <td>14904</td>\n","      <td>28379</td>\n","      <td>9171</td>\n","      <td>2816</td>\n","      <td>1340</td>\n","      <td>683</td>\n","      <td>330</td>\n","      <td>82</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>57</td>\n","      <td>7943</td>\n","      <td>21900</td>\n","      <td>11124</td>\n","      <td>4429</td>\n","      <td>2079</td>\n","      <td>1193</td>\n","      <td>686</td>\n","      <td>330</td>\n","      <td>35</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>34</td>\n","      <td>3226</td>\n","      <td>13685</td>\n","      <td>11207</td>\n","      <td>3976</td>\n","      <td>1803</td>\n","      <td>808</td>\n","      <td>415</td>\n","      <td>135</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>169</td>\n","      <td>10829</td>\n","      <td>21101</td>\n","      <td>9958</td>\n","      <td>4463</td>\n","      <td>2305</td>\n","      <td>1337</td>\n","      <td>767</td>\n","      <td>298</td>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c2163fa-c7b8-47af-8770-d07e07d79a33')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8c2163fa-c7b8-47af-8770-d07e07d79a33 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8c2163fa-c7b8-47af-8770-d07e07d79a33');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["pat1_weight"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"wIqcqzFLvlTA","executionInfo":{"status":"ok","timestamp":1673345756304,"user_tz":-420,"elapsed":807,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"67f258d1-d1ae-4671-ea89-495f809a44b4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       0-30  30-60  60-90  90-120  120-150  150-180  180-210  210-240  \\\n","year                                                                    \n","65     3114  10628   4693    1510      681      349      185       97   \n","64      675  11644  10126    3252     1309      571      272      132   \n","63     4103  16814   7820    2150      921      559      343      206   \n","62     9147  18210   4693    1262      591      316      158       76   \n","61     8848  20846   5680    1111      454      217      108       51   \n","60    17824  26014   4767    1088      444      234      132       74   \n","59     4407  37465  13533    1611      505      215       88       37   \n","58     6256  31928  10179    1042      241       83       33        9   \n","57     3331  19686   9765    1655      545      215       78       20   \n","56    17296  28549   4004     805      329      149       67       27   \n","\n","      240-270  270-300  \n","year                    \n","65         43       12  \n","64         67       26  \n","63        149       82  \n","62         30       10  \n","61         24        8  \n","60         28       18  \n","59         14        4  \n","58          4        1  \n","57          5        2  \n","56          6        3  "],"text/html":["\n","  <div id=\"df-6d43c49b-7e86-487e-972c-c22984e9f3eb\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0-30</th>\n","      <th>30-60</th>\n","      <th>60-90</th>\n","      <th>90-120</th>\n","      <th>120-150</th>\n","      <th>150-180</th>\n","      <th>180-210</th>\n","      <th>210-240</th>\n","      <th>240-270</th>\n","      <th>270-300</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>65</th>\n","      <td>3114</td>\n","      <td>10628</td>\n","      <td>4693</td>\n","      <td>1510</td>\n","      <td>681</td>\n","      <td>349</td>\n","      <td>185</td>\n","      <td>97</td>\n","      <td>43</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>675</td>\n","      <td>11644</td>\n","      <td>10126</td>\n","      <td>3252</td>\n","      <td>1309</td>\n","      <td>571</td>\n","      <td>272</td>\n","      <td>132</td>\n","      <td>67</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>4103</td>\n","      <td>16814</td>\n","      <td>7820</td>\n","      <td>2150</td>\n","      <td>921</td>\n","      <td>559</td>\n","      <td>343</td>\n","      <td>206</td>\n","      <td>149</td>\n","      <td>82</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>9147</td>\n","      <td>18210</td>\n","      <td>4693</td>\n","      <td>1262</td>\n","      <td>591</td>\n","      <td>316</td>\n","      <td>158</td>\n","      <td>76</td>\n","      <td>30</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>8848</td>\n","      <td>20846</td>\n","      <td>5680</td>\n","      <td>1111</td>\n","      <td>454</td>\n","      <td>217</td>\n","      <td>108</td>\n","      <td>51</td>\n","      <td>24</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>17824</td>\n","      <td>26014</td>\n","      <td>4767</td>\n","      <td>1088</td>\n","      <td>444</td>\n","      <td>234</td>\n","      <td>132</td>\n","      <td>74</td>\n","      <td>28</td>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>4407</td>\n","      <td>37465</td>\n","      <td>13533</td>\n","      <td>1611</td>\n","      <td>505</td>\n","      <td>215</td>\n","      <td>88</td>\n","      <td>37</td>\n","      <td>14</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>6256</td>\n","      <td>31928</td>\n","      <td>10179</td>\n","      <td>1042</td>\n","      <td>241</td>\n","      <td>83</td>\n","      <td>33</td>\n","      <td>9</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>3331</td>\n","      <td>19686</td>\n","      <td>9765</td>\n","      <td>1655</td>\n","      <td>545</td>\n","      <td>215</td>\n","      <td>78</td>\n","      <td>20</td>\n","      <td>5</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>17296</td>\n","      <td>28549</td>\n","      <td>4004</td>\n","      <td>805</td>\n","      <td>329</td>\n","      <td>149</td>\n","      <td>67</td>\n","      <td>27</td>\n","      <td>6</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d43c49b-7e86-487e-972c-c22984e9f3eb')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6d43c49b-7e86-487e-972c-c22984e9f3eb button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6d43c49b-7e86-487e-972c-c22984e9f3eb');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["gat_weight"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"js3nLbWkSYP9","executionInfo":{"status":"ok","timestamp":1673345756306,"user_tz":-420,"elapsed":27,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"331c3cab-3639-47f2-eb54-51f834daa7ab"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      0-30  30-60  60-90  90-120  120-150  150-180  180-210  210-240  240-270  \\\n","year                                                                            \n","65     405   2199   2539    4240     5958     4128     1423      361       57   \n","64    1076   4013   3550    4187     4005     3658     3510     2388     1327   \n","63     805   3434   3237    3860     4878     6206     5453     3251     1664   \n","62     711   3623   4412    4953     4560     4877     4959     3383     2243   \n","61    1293   5591   3119    2908     3934     7033     7418     3898     1773   \n","60    1499   7650   7655    7421     7754     8698     6434     2748      687   \n","59    2322  10281   9626    9301     9504     7141     6020     2747      832   \n","58     594   7466   8066    7382     6305     6142     7369     4409     1630   \n","57     366   4370   3816    3876     4891     6656     6373     3361     1366   \n","56     928  11160  10315    7728     6722     5853     4431     2534     1237   \n","\n","      270-300  \n","year           \n","65          2  \n","64        360  \n","63        359  \n","62        772  \n","61        380  \n","60         77  \n","59        105  \n","58        413  \n","57        227  \n","56        327  "],"text/html":["\n","  <div id=\"df-835489dc-6ea1-497b-b02c-3e3b4423c9c3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0-30</th>\n","      <th>30-60</th>\n","      <th>60-90</th>\n","      <th>90-120</th>\n","      <th>120-150</th>\n","      <th>150-180</th>\n","      <th>180-210</th>\n","      <th>210-240</th>\n","      <th>240-270</th>\n","      <th>270-300</th>\n","    </tr>\n","    <tr>\n","      <th>year</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>65</th>\n","      <td>405</td>\n","      <td>2199</td>\n","      <td>2539</td>\n","      <td>4240</td>\n","      <td>5958</td>\n","      <td>4128</td>\n","      <td>1423</td>\n","      <td>361</td>\n","      <td>57</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>1076</td>\n","      <td>4013</td>\n","      <td>3550</td>\n","      <td>4187</td>\n","      <td>4005</td>\n","      <td>3658</td>\n","      <td>3510</td>\n","      <td>2388</td>\n","      <td>1327</td>\n","      <td>360</td>\n","    </tr>\n","    <tr>\n","      <th>63</th>\n","      <td>805</td>\n","      <td>3434</td>\n","      <td>3237</td>\n","      <td>3860</td>\n","      <td>4878</td>\n","      <td>6206</td>\n","      <td>5453</td>\n","      <td>3251</td>\n","      <td>1664</td>\n","      <td>359</td>\n","    </tr>\n","    <tr>\n","      <th>62</th>\n","      <td>711</td>\n","      <td>3623</td>\n","      <td>4412</td>\n","      <td>4953</td>\n","      <td>4560</td>\n","      <td>4877</td>\n","      <td>4959</td>\n","      <td>3383</td>\n","      <td>2243</td>\n","      <td>772</td>\n","    </tr>\n","    <tr>\n","      <th>61</th>\n","      <td>1293</td>\n","      <td>5591</td>\n","      <td>3119</td>\n","      <td>2908</td>\n","      <td>3934</td>\n","      <td>7033</td>\n","      <td>7418</td>\n","      <td>3898</td>\n","      <td>1773</td>\n","      <td>380</td>\n","    </tr>\n","    <tr>\n","      <th>60</th>\n","      <td>1499</td>\n","      <td>7650</td>\n","      <td>7655</td>\n","      <td>7421</td>\n","      <td>7754</td>\n","      <td>8698</td>\n","      <td>6434</td>\n","      <td>2748</td>\n","      <td>687</td>\n","      <td>77</td>\n","    </tr>\n","    <tr>\n","      <th>59</th>\n","      <td>2322</td>\n","      <td>10281</td>\n","      <td>9626</td>\n","      <td>9301</td>\n","      <td>9504</td>\n","      <td>7141</td>\n","      <td>6020</td>\n","      <td>2747</td>\n","      <td>832</td>\n","      <td>105</td>\n","    </tr>\n","    <tr>\n","      <th>58</th>\n","      <td>594</td>\n","      <td>7466</td>\n","      <td>8066</td>\n","      <td>7382</td>\n","      <td>6305</td>\n","      <td>6142</td>\n","      <td>7369</td>\n","      <td>4409</td>\n","      <td>1630</td>\n","      <td>413</td>\n","    </tr>\n","    <tr>\n","      <th>57</th>\n","      <td>366</td>\n","      <td>4370</td>\n","      <td>3816</td>\n","      <td>3876</td>\n","      <td>4891</td>\n","      <td>6656</td>\n","      <td>6373</td>\n","      <td>3361</td>\n","      <td>1366</td>\n","      <td>227</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>928</td>\n","      <td>11160</td>\n","      <td>10315</td>\n","      <td>7728</td>\n","      <td>6722</td>\n","      <td>5853</td>\n","      <td>4431</td>\n","      <td>2534</td>\n","      <td>1237</td>\n","      <td>327</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-835489dc-6ea1-497b-b02c-3e3b4423c9c3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-835489dc-6ea1-497b-b02c-3e3b4423c9c3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-835489dc-6ea1-497b-b02c-3e3b4423c9c3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["**แผนภูมิแท่งเปรียบเทียบจำนวนนักเรียนทั้งหมดที่สอบ GAT, PAT1 กับ จำนวนนักเรียนที่สอบ Gat และ PAT3, PAT1 และ PAT3**\n","\n","![alt text](https://drive.google.com/uc?id=1Hagkc0HyGRbnO23wTQLGvnsd5j183ruD)"],"metadata":{"id":"gdgDiLy-275L"}},{"cell_type":"markdown","metadata":{"id":"aWTU_8nftUoo"},"source":["## Function"]},{"cell_type":"markdown","metadata":{"id":"CAhPHd8TCHQJ"},"source":["\n","\n","*range_score_interested(lower, upper, subject, year)*\n","\n","สร้าง list of tuple ที่มีสมาชิกเป็น (lower, lower+30, จำนวนคน) โดยที่ lower+30 <= upper\n","```\n","range_score_interested(150, 300, pat1_weight, 65) \n",">> [(150, 180, 571), (180, 210, 272), (210, 240, 132), (240, 270, 67), (270, 300, 26)]\n","```\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"d0kjSze5CIt7"},"source":["*random_data_by_weight(range_score_interested(lower, upper, subject, year))*\\\n","สุ่มคะแนนในช่วงคะแนนต่างๆ ตามจำนวนนักเรียนในช่วงนั้นๆ แบบ Uniform([30n, 30(n+1)]) เมื่อ n เป็นสมาชิกของ {0,1, 2, ..., 9} \\\n","ดังนั้น จะได้ว่านักเรียนแต่ละคนจะมีคะแนนเป็นของตัวเองคนละ 1 ครั้ง\n","```\n","rand_data_by_weight([(150, 180, 571), (180, 210, 272)])\n",">> array([165, 157, 157, ..., 179, 180, 185, 182, ..., 210, 205])\n","```"]},{"cell_type":"markdown","metadata":{"id":"IgwEsJTvCKFz"},"source":["*shuffle()*\\\n","สลับตำแหน่งข้อมูล เนื่องจากฟังก์ชัน random_data_by_weight จะสุ่มแบบเรียงลำดับจากน้อยไปมาก\n","```\n","pat1_rv = rand_data_by_weight(range_score_interested(0, 300, 'pat1_weight', 64))\n","print(pat1_rv)\n",">> [ 29  28  26 ... 296 279 276]\n","np.random.shuffle(pat1_rv)\n","print(pat1_rv)\n",">> [ 44  61  93 ...  33  74 128]\n","```"]},{"cell_type":"markdown","metadata":{"id":"IyRZ8vpiIhYL"},"source":["*cal_enroll_score(year)*\\\n","คำนวณผลรวมคะแนนโดยมีตัวคูณคะแนน PAT1:PAT3:GAT = 20:60:20\\\n","คืนข้อมูลเป็นข้อมูลคะแนนรวมของนักเรียนที่สอบทั้ง PAT3, PAT1 และ GAT\\\n","```\n","cal_enroll_score(64)\n",">> array([27220, 27060, 26520, ..., 16780, 16740, 16560])\n","```\n"]},{"cell_type":"markdown","metadata":{"id":"5wRexWyHIiCo"},"source":["*find_best_reject()*\\\n","หาจำนวนคนที่สอบ PAT3 แต่ไม่ยื่นเข้าวิศวะจุฬา ที่ทำให้ MAE(Mean Absolute Error) ของ predictMinScore VS Minscore \n","```\n","find_best_reject()\n",">> 978 (จำนวนคนที่จะไม่ยื่น)\n","```"]},{"cell_type":"code","metadata":{"id":"Pq6OTyENlMVu"},"source":["from collections import Counter\n","import matplotlib.pyplot as plt\n","\n","def plot_bar(score_data):\n","    \"\"\" Plot histogram for total score \"\"\"\n","    histogram = Counter(min(score//1000*1000, 29000) for score in score_data)\n","    plt.bar([lower_bound+500 for lower_bound in histogram.keys()], \n","            histogram.values(), \n","            1000, \n","            edgecolor=(0,0,0)\n","            )\n","    plt.xlabel('total score intake to Chula ENG')\n","    plt.ylabel('Number of people in inteval 1000')\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q-Hsei7TkZaN"},"source":["def range_score_interested(lower, upper, subject, year):\n","    interval = [lower + (n*30) for n in range((upper-lower) // 30 + 1)]\n","    rand_score = [(lower + n*30, lower+((n+1)*30), eval(subject)[str(lower+n*30)+'-'+str(lower+((n+1)*30))][year]) for n in range((upper-lower) // 30)]\n","    return rand_score"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5fezg-6YYfPs"},"source":["def rand_data_by_weight(data: list):\n","    \"\"\" uniform random score with exact number of data in score range\"\"\"\n","    collect_intvs = [np.random.randint(interval[0], interval[1], interval[2]) for interval in data]\n","    return np.concatenate(collect_intvs)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"up5Z7B2zFWnW"},"source":["def shuffle(pat1, pat3, gat):\n","    \"\"\"shuffle data\"\"\"\n","    np.random.shuffle(pat3)\n","    np.random.shuffle(pat1)\n","    np.random.shuffle(gat)\n","    return pat1, pat3, gat"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","fig, axs = plt.subplots(2, 2, figsize=(8, 6), tight_layout=True)\n","fig.tight_layout()\n","gat_plot = rand_data_by_weight(range_score_interested(0, 300, 'gat', 64))\n","pat1_plot = rand_data_by_weight(range_score_interested(0, 300, 'pat1', 64))\n","pat1_weight_plot = rand_data_by_weight(range_score_interested(0, 300, 'pat1_weight', 64))\n","gat_weight_plot = rand_data_by_weight(range_score_interested(0, 300, 'gat_weight', 64))\n","plt.setp(axs, xticks=[x for x in range(0, 301, 30)])\n","\n","axs[0, 0].hist(gat_plot, edgecolor='black'), axs[0, 0].set_title('Number of student test GAT (2564)')\n","axs[0, 1].hist(pat1_plot, edgecolor='black'), axs[0, 1].set_title('Number of student test PAT1 (2564)')\n","axs[1, 0].hist(gat_weight_plot, edgecolor='black'), axs[1, 0].set_title('Number of student test GAT and PAT3 (2564)')\n","axs[1, 1].hist(pat1_weight_plot, edgecolor='black'), axs[1, 1].set_title('Number of student test PAT1 and PAT3 (2564)')\n","plt.show()"],"metadata":{"id":"xvumHvhOGo35","colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"status":"ok","timestamp":1673345756960,"user_tz":-420,"elapsed":675,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"7e93869d-900f-4e30-dd2d-27cb7a29dee4"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 576x432 with 4 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ro-rGvScmDpw"},"source":["def cal_enroll_score(year):\n","    \"\"\" Calculate total score by weight PAT1:PAT3:GAT = 20:20:60 \"\"\"\n","    pat1_rv = rand_data_by_weight(range_score_interested(0, 300, 'pat1_weight', year))\n","    pat3_rv = rand_data_by_weight(range_score_interested(150, 300, 'pat3', year))\n","    gat_rv = rand_data_by_weight(range_score_interested(180, 300, 'gat_weight', year))\n","\n","    pat1_rv = sorted(pat1_rv)[::-1][:1600]\n","    pat3_rv = sorted(pat3_rv)[::-1][:1600]\n","    pat1_rv, pat3_rv, gat_rv = shuffle(pat1_rv, pat3_rv, gat_rv)\n","    min_num = min(len(pat1_rv), len(pat3_rv), len(gat_rv))\n","\n","    pat1_rv = np.array([pat1_rv[:min_num]]) * 20\n","    gat_rv =  np.array([gat_rv[:min_num]]) * 20\n","    pat3_rv =  np.array([pat3_rv[:min_num]]) * 60\n","    enroll_score = np.sum(np.concatenate((pat3_rv, pat1_rv, gat_rv), axis=0), axis=0)\n","    enroll_score = np.sort(enroll_score)[::-1]\n","    return enroll_score"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Tuning parameters \n","Find the number of rejected student that make at least sum of absulote errors in predicted score\n","\n","**Theorem:** SAE(Sum of Absolute Errors), Central limit theorem"],"metadata":{"id":"qaszLGeezbEN"}},{"cell_type":"code","metadata":{"id":"hHvAx9yDC0oH"},"source":["def find_best_reject():\n","    \"\"\" error can be negative(less than real min score) and positive \"\"\"\n","    years_err = []\n","    min_n = min(1600-chula_df['intake'])\n","    for year in range(56,64+1):\n","        year_err = []\n","        enroll_score = cal_enroll_score(year)\n","        real_min, intake = chula_df['min_score'][year],  chula_df['intake'][year]\n","        for reject in range(0, min_n+1):\n","            reject_index = np.random.randint(0,  len(enroll_score), reject)\n","            enroll_score_af_reject =  np.delete(enroll_score, reject_index)\n","            pred_min =  enroll_score_af_reject[chula_df['intake'][year]]\n","            err = abs(pred_min-real_min)\n","            year_err.append(err)\n","        years_err.append(year_err)\n","    min_n_reject = min([len(data) for data in years_err])\n","    data = np.array([year_err[:min_n_reject] for year_err in years_err])\n","    return np.argmin(np.sum(data, axis=0)/(2565-2556+1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YAKlEARmc5Ax","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1673345787442,"user_tz":-420,"elapsed":30490,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"342b1b21-f1af-4921-8cf4-2128ca809c51"},"source":["# Central Limit Theorem\n","n = np.round(np.mean([find_best_reject() for _ in range(50)]))\n","n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["977.0"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["year = 64\n","enroll_score = cal_enroll_score(year)\n","i = np.random.randint(0,  len(enroll_score), 978)\n","enroll_score_af_reject =  np.delete(enroll_score, i)\n","\n","plt.hist(enroll_score, edgecolor='Black', bins=[x*1000 for x in range(16, 31, 1)])\n","plt.hist(enroll_score_af_reject, edgecolor='Black', bins=[x*1000 for x in range(16, 31, 1)])\n","\n","plt.legend(['Does not apply', 'Applying'])\n","plt.xlabel('Point intervals')\n","plt.ylabel('Number of students applying')\n","plt.show()"],"metadata":{"id":"zfr0r6JBC8zi","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1673345787445,"user_tz":-420,"elapsed":29,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"4c5a27c0-c1b6-440d-f67f-deab6e59e4fb"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"afGDsK8UYPdL"},"source":["## Prediction"]},{"cell_type":"code","source":["def predict(year):\n","    \"\"\" input: year, output: (predict_score, real_min_score, error)\"\"\"\n","    real_min = chula_df['min_score'][year]\n","    enroll_score = cal_enroll_score(year)\n","    # pos = np.random.randint(0,  len(enroll_score), n)\n","    pos = np.random.randint(0,  len(enroll_score), 978)\n","    enroll_score_wo_rej = np.delete(enroll_score, pos)\n","\n","    if len(enroll_score_wo_rej) < chula_df['intake'][year]:\n","        pred_score = int(min(enroll_score_wo_rej))\n","    else:\n","        pred_score = int(enroll_score_wo_rej[chula_df['intake'][year]])\n","\n","    return (pred_score, real_min, pred_score-real_min)"],"metadata":{"id":"pRFHSL1G0nTP"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I8dv2fdQcWV-"},"source":["def predict_table(ini_year, final_year):\n","    \"\"\" make the table from initial year to final year inputs \"\"\"\n","    data = {'year':[], 'predictMinScore':[], 'MinScore': [], 'error':[]}\n","    \n","    for year in range(final_year, ini_year-1, -1):\n","        (pred_score, real_min,err) = [round(data, 2) for data in predict(year)]\n","\n","        data['year'].append(year)\n","        data['predictMinScore'].append(pred_score)\n","        data['MinScore'].append(real_min)\n","        data['error'].append(err)\n","    df = pd.DataFrame(data, columns=['year', 'predictMinScore', 'MinScore', 'error'])\n","    return df"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = predict_table(56, 64)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":332},"id":"fHs8A6fq9TyH","executionInfo":{"status":"ok","timestamp":1673345787989,"user_tz":-420,"elapsed":564,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"94f4d5eb-c89d-4863-a55c-40d632152baf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   year  predictMinScore  MinScore  error\n","0    64            19980     18503   1477\n","1    63            20300     19985    315\n","2    62            19500     18360   1140\n","3    61            19260     17030   2230\n","4    60            18760     18870   -110\n","5    59            17660     17510    150\n","6    58            19020     19090    -70\n","7    57            18200     18552   -352\n","8    56            19280     19100    180"],"text/html":["\n","  <div id=\"df-841216b7-8b34-424f-8e06-bb38504bb656\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>predictMinScore</th>\n","      <th>MinScore</th>\n","      <th>error</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>64</td>\n","      <td>19980</td>\n","      <td>18503</td>\n","      <td>1477</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>63</td>\n","      <td>20300</td>\n","      <td>19985</td>\n","      <td>315</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>62</td>\n","      <td>19500</td>\n","      <td>18360</td>\n","      <td>1140</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>61</td>\n","      <td>19260</td>\n","      <td>17030</td>\n","      <td>2230</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60</td>\n","      <td>18760</td>\n","      <td>18870</td>\n","      <td>-110</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>59</td>\n","      <td>17660</td>\n","      <td>17510</td>\n","      <td>150</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>58</td>\n","      <td>19020</td>\n","      <td>19090</td>\n","      <td>-70</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>57</td>\n","      <td>18200</td>\n","      <td>18552</td>\n","      <td>-352</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>56</td>\n","      <td>19280</td>\n","      <td>19100</td>\n","      <td>180</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-841216b7-8b34-424f-8e06-bb38504bb656')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-841216b7-8b34-424f-8e06-bb38504bb656 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-841216b7-8b34-424f-8e06-bb38504bb656');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"DG1-pMhYeYSg"},"source":["# Central Limit Theorem\n","df = predict_table(56, 64) \n","for i in range(50): \n","    df = df.append(predict_table(56, 64))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0IOTd3jTvzzQ"},"source":["# Find mean of PMS(predictMinScore) and mean of Error\n","gb_year = df.groupby('year')\n","df1 = gb_year['predictMinScore'].apply(list).reset_index(name='predictMinScore')\n","df2 = gb_year['error'].apply(list).reset_index(name='error')\n","\n","result = df1.merge(df2)\n","result = result.iloc[::-1].reset_index(drop=True)\n","result['realMinScore'] = chula_df['min_score'].reset_index()['min_score']\n","result['meanPMS'] = np.round(result['predictMinScore'].apply(np.mean).to_frame())\n","result['meanError'] = np.round(result['error'].apply(np.mean).to_frame())"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["result[['year', 'realMinScore','meanPMS','meanError']]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":332},"id":"HOMYmzpfCcDU","executionInfo":{"status":"ok","timestamp":1667621288852,"user_tz":-420,"elapsed":17,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"e6f0e0ed-b73a-4691-f554-421f8835da17"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   year  realMinScore  meanPMS  meanError\n","0    64         15305  19881.0     1378.0\n","1    63         18503  20280.0      295.0\n","2    62         19985  19469.0     1109.0\n","3    61         18360  19202.0     2172.0\n","4    60         17030  18887.0       17.0\n","5    59         18870  17660.0      150.0\n","6    58         17510  19007.0      -83.0\n","7    57         19090  18231.0     -321.0\n","8    56         18552  19251.0      151.0"],"text/html":["\n","  <div id=\"df-5b9b750f-36e1-45e4-829a-cb1d8b8677bc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>realMinScore</th>\n","      <th>meanPMS</th>\n","      <th>meanError</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>64</td>\n","      <td>15305</td>\n","      <td>19881.0</td>\n","      <td>1378.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>63</td>\n","      <td>18503</td>\n","      <td>20280.0</td>\n","      <td>295.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>62</td>\n","      <td>19985</td>\n","      <td>19469.0</td>\n","      <td>1109.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>61</td>\n","      <td>18360</td>\n","      <td>19202.0</td>\n","      <td>2172.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60</td>\n","      <td>17030</td>\n","      <td>18887.0</td>\n","      <td>17.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>59</td>\n","      <td>18870</td>\n","      <td>17660.0</td>\n","      <td>150.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>58</td>\n","      <td>17510</td>\n","      <td>19007.0</td>\n","      <td>-83.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>57</td>\n","      <td>19090</td>\n","      <td>18231.0</td>\n","      <td>-321.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>56</td>\n","      <td>18552</td>\n","      <td>19251.0</td>\n","      <td>151.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b9b750f-36e1-45e4-829a-cb1d8b8677bc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5b9b750f-36e1-45e4-829a-cb1d8b8677bc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5b9b750f-36e1-45e4-829a-cb1d8b8677bc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":141}]},{"cell_type":"markdown","source":["### ผลการทดลอง\n","1. ได้ผลการทดลองดังตาราง จากผลของแต่ละปีมี error ไม่เกิน 7%  ยกเว้นปี 2561 เนื่องจาก 2561 มีการปรับเปลี่ยนการสอบโดยแบ่งเป็น 2 รอบ โดยมีรอบ 3.1 และ 3.2 และในรอบ 3.1 ผู้เข้าสอบ 1 คนสามารถยื่นได้ 4 คณะและมีสิทธิ์เลือกได้ทั้ง 4 คณะว่าจะเอาคณะไหน ทำให้เกิดปัญหา อย่างเช่น\n","ผู้สมัครที่อยากเรียนแพทย์ซึ่งมีคะแนนที่สูงแต่ไม่มั่นใจว่าจะติดเลือกวิศวะจุฬาไว้เป็นตัวเลือกสำรอง ดังนั้นจึงทำให้ข้อมูลคะแนนขั้นต่ำที่ประกาศออกมาสูงมากทำให้ข้อมูลที่เราได้รับมามีค่า error ที่สูง \n","2. เนื่องจาก ค่าทำนายส่วนใหญ่สูงกว่าค่าจริง และค่าทำนายที่ต่ำกว่าค่าจริงมีน้อย ในปี 2557 ค่าทำนายต่ำกว่าค่าต่ำสุดจริง เท่ากับ 316 คะแนน ซึ่งเป็นค่าทำนายที่ต่ำที่กว่าค่าจริงที่มี Error มากที่สุด\n","    ดังนั้นหากทำนายหาค่า predictMinScore ปี 2565 จะได้ว่า\n","นักเรียนที่มี คะแนน >= predictMinScore + 316 คะแนน มีโอกาสเข้าศึกคณะวิศวกรรมศาสตร์อย่างแน่นอนจากสถิติที่มี ณ ตอนนี้"],"metadata":{"id":"9Jl9DFSfzSbf"}},{"cell_type":"markdown","source":["---"],"metadata":{"id":"yn-SfSEp4wIt"}},{"cell_type":"markdown","source":["# ทำนายคะแนนสอบเข้าวิศวกรรมศาสตร์ปี 2565\n","ข้อมูลในปีนี้ไม่ได้ถูก train ใน model\n"],"metadata":{"id":"xFvvxuCp4yE0"}},{"cell_type":"code","source":["pred_score, min_score, err = predict(65)"],"metadata":{"id":"dUA6cVo15Bnx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Predicted score: {}, Real min score: {}, Error: {}\".format(pred_score, min_score, err))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HFSs1Jse5Il-","executionInfo":{"status":"ok","timestamp":1673345822929,"user_tz":-420,"elapsed":5,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"eb6413d5-9727-4e45-d038-3031b7838657"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted score: 15360, Real min score: 15305, Error: 55\n"]}]},{"cell_type":"markdown","source":["By analysis from the report, we need to plus 316 point to the predicted score. so that the result is ..."],"metadata":{"id":"1tJwEXkA5s6a"}},{"cell_type":"code","source":["print(\"Predicted score: {}, Real min score: {}, Error: {}\".format(pred_score+316, min_score, err+316))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0_sciRJz53hO","executionInfo":{"status":"ok","timestamp":1673345823771,"user_tz":-420,"elapsed":7,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"97b4f8ad-4782-4d3c-d141-b5a6849bd6e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted score: 15676, Real min score: 15305, Error: 371\n"]}]},{"cell_type":"markdown","source":["# Commit to Github"],"metadata":{"id":"lJnRqop4Nmcg"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rIiWkNfbMHcH","executionInfo":{"status":"ok","timestamp":1673347310251,"user_tz":-420,"elapsed":3041,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"c505ed58-7ebc-4a74-dfe3-91d9ce546583"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["git_token = \"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\"\n","!git clone https://{git_token}@github.com/{\"PrasopchokGot\"}/{\"Prob_stat_project\"}"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jWt3uPrsNLSK","executionInfo":{"status":"ok","timestamp":1673347341979,"user_tz":-420,"elapsed":17,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"d8562a9b-85aa-4d87-9ae2-01fb7a4afc2d"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["fatal: destination path 'Prob_stat_project' already exists and is not an empty directory.\n"]}]},{"cell_type":"code","source":["%cd /content/drive/MyDrive/Prob_stat_project/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"McFlHhJRMQlU","executionInfo":{"status":"ok","timestamp":1673347374644,"user_tz":-420,"elapsed":337,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"163277fa-3878-4d1f-d295-4508b269392c"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Prob_stat_project\n"]}]},{"cell_type":"code","source":["!git status"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oRA88YZWOUKF","executionInfo":{"status":"ok","timestamp":1673347375205,"user_tz":-420,"elapsed":9,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"00b2f73e-f570-453b-abf4-5f78f8331974"},"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["On branch main\n","Your branch is up to date with 'origin/main'.\n","\n","nothing to commit, working tree clean\n"]}]},{"cell_type":"code","source":["!git commit -m \"Edit vidva_weight.xlsx path file\"\n","!git push"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2NyKz5jpAj_W","executionInfo":{"status":"ok","timestamp":1673347259837,"user_tz":-420,"elapsed":717,"user":{"displayName":"Prasopchok Rodsiri","userId":"05470964535799694385"}},"outputId":"310207aa-e293-453b-f8c1-2f90cd00c49a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\n","fatal: Unable to read current working directory: No such file or directory\n","shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory\n","fatal: Unable to read current working directory: No such file or directory\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"fcHOW4QVP-E9"},"execution_count":null,"outputs":[]}]}